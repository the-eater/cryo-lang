#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

import sys

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu
from tatsu.util import re, generic_main  # noqa


KEYWORDS = {}  # type: ignore


class CryoLangBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace=re.compile('[\\t ]+'),
        nameguard=None,
        comments_re='\\/\\*(.|\\n)*\\*\\/',
        eol_comments_re='(#|\\/\\/).*?\\n',
        ignorecase=None,
        namechars='',
        **kwargs
    ):
        super(CryoLangBuffer, self).__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class CryoLangParser(Parser):
    def __init__(
        self,
        whitespace=re.compile('[\\t ]+'),
        nameguard=None,
        comments_re='\\/\\*(.|\\n)*\\*\\/',
        eol_comments_re='(#|\\/\\/).*?\\n',
        ignorecase=None,
        left_recursion=True,
        parseinfo=True,
        keywords=None,
        namechars='',
        buffer_class=CryoLangBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super(CryoLangParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            buffer_class=buffer_class,
            **kwargs
        )

    @tatsumasu()
    def _start_(self):  # noqa
        with self._optional():
            self._stmt_coll_()
            self.name_last_node('@')

        def block1():
            self._nl_()
        self._closure(block1)
        self._check_eof()

    @tatsumasu()
    def _stmt_coll_(self):  # noqa
        self._stmt_()
        self.add_last_node_to_name('@')

        def block1():
            self._nl_()
            self._stmt_()
            self.add_last_node_to_name('@')
        self._closure(block1)

    @tatsumasu()
    def _stmt_(self):  # noqa
        with self._choice():
            with self._option():
                self._set_stmt_()
                self.name_last_node('@')
            with self._option():
                self._func_call_()
                self.name_last_node('@')
            with self._option():
                self._if_stmt_()
                self.name_last_node('@')
            with self._option():
                self._return_stmt_()
                self.name_last_node('@')
            self._error('no available options')

    @tatsumasu()
    def _tokens_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('true')
            with self._option():
                self._token('false')
            with self._option():
                self._token('null')
            self._error('no available options')

    @tatsumasu()
    def _set_stmt_(self):  # noqa
        self._assg_path_()
        self.name_last_node('left')
        self._set_action_()
        self.name_last_node('action')
        self._expr_with_func_()
        self.name_last_node('right')
        self.ast._define(
            ['action', 'left', 'right'],
            []
        )

    @tatsumasu()
    def _set_action_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('+=')
            with self._option():
                self._token('=')
            self._error('no available options')

    @tatsumasu()
    def _obj_path_(self):  # noqa
        self._keyword_()
        self.add_last_node_to_name('@')

        def block1():
            self._obj_leaf_()
            self.add_last_node_to_name('@')
        self._closure(block1)

    @tatsumasu()
    def _obj_leaf_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('.')
                self._keyword_()
                self.name_last_node('@')
            with self._option():
                self._token('[')
                self._expr_()
                self.name_last_node('@')
                self._token(']')
            self._error('no available options')

    @tatsumasu()
    def _keyword_(self):  # noqa
        self._pattern(r'[a-zA-Z_][a-zA-Z0-9_]*')

    @tatsumasu()
    def _nl_(self):  # noqa
        self._pattern(r'\n+')

    @tatsumasu()
    def _string_(self):  # noqa
        self._pattern(r'(\'|")((?!\1|\\).|\\.)+\1')

    @tatsumasu()
    def _digit_(self):  # noqa
        self._pattern(r'-?(\d*\.)?\d+')

    @tatsumasu()
    def _func_call_(self):  # noqa
        self._keyword_()
        self.name_last_node('func')
        self._token('(')
        self._cut()

        def block1():
            self._nl_()
        self._closure(block1)
        with self._optional():
            self._expr_()
            self.add_last_node_to_name('args')

            def block3():
                self._comma_or_nl_()
                self._expr_()
                self.add_last_node_to_name('args')
            self._closure(block3)

            def block5():
                self._nl_()
            self._closure(block5)
        self._token(')')
        self.ast._define(
            ['func'],
            ['args']
        )

    @tatsumasu()
    def _arr_(self):  # noqa
        self._token('[')

        def block0():
            self._nl_()
        self._closure(block0)
        self._constant({})
        self.add_last_node_to_name('@')
        with self._optional():
            self._arr_assg_()
            self.add_last_node_to_name('@')

            def block3():
                self._comma_or_nl_()
                self._arr_assg_()
                self.add_last_node_to_name('@')
            self._closure(block3)

            def block5():
                self._nl_()
            self._closure(block5)
        self._token(']')

    @tatsumasu()
    def _arr_assg_(self):  # noqa
        with self._choice():
            with self._option():
                self._expr_()
                self.name_last_node('@')
            with self._option():
                self._arr_spread_()
                self.name_last_node('@')
            self._error('no available options')

    @tatsumasu()
    def _arr_spread_(self):  # noqa
        self._token('...')
        self._cut()
        with self._group():
            with self._choice():
                with self._option():
                    self._obj_path_()
                with self._option():
                    self._arr_()
                self._error('no available options')
        self.name_last_node('@')

    @tatsumasu()
    def _obj_(self):  # noqa
        self._token('{')

        def block0():
            self._nl_()
        self._closure(block0)
        with self._optional():
            self._obj_merge_()
            self.add_last_node_to_name('@')

            def block2():
                self._comma_or_nl_()
                self._obj_merge_()
                self.add_last_node_to_name('@')
            self._closure(block2)

            def block4():
                self._nl_()
            self._closure(block4)
        self._token('}')

    @tatsumasu()
    def _obj_merge_(self):  # noqa
        with self._choice():
            with self._option():
                self._obj_spread_()
                self.name_last_node('@')
            with self._option():
                self._obj_kv_()
                self.name_last_node('@')
            self._error('no available options')

    @tatsumasu()
    def _obj_kv_(self):  # noqa
        with self._choice():
            with self._option():
                self._obj_key_()
                self.name_last_node('key')
                self._token(':')
                self._expr_()
                self.name_last_node('val')
            with self._option():
                self._keyword_()
                self.name_last_node('key')
            with self._option():
                self._obj_spread_()
            self._error('no available options')
        self.ast._define(
            ['key', 'val'],
            []
        )

    @tatsumasu()
    def _obj_spread_(self):  # noqa
        self._token('...')
        self._cut()
        with self._group():
            with self._choice():
                with self._option():
                    self._obj_path_()
                with self._option():
                    self._obj_()
                self._error('no available options')
        self.name_last_node('@')

    @tatsumasu()
    def _obj_key_(self):  # noqa
        with self._choice():
            with self._option():
                self._string_()
            with self._option():
                self._obj_path_()
            with self._option():
                self._obj_key_expr_()
            self._error('no available options')

    @tatsumasu()
    def _obj_key_expr_(self):  # noqa
        self._token('[')
        self._expr_()
        self.name_last_node('@')
        self._token(']')

    @tatsumasu()
    def _obj_assg_(self):  # noqa
        self._token('{')

        def block0():
            self._nl_()
        self._closure(block0)
        self._obj_assg_to_()
        self.add_last_node_to_name('@')

        def block2():
            self._comma_or_nl_()
            self._obj_assg_to_()
            self.add_last_node_to_name('@')
        self._closure(block2)

        def block4():
            self._nl_()
        self._closure(block4)
        self._token('}')

    @tatsumasu()
    def _obj_assg_to_(self):  # noqa
        with self._choice():
            with self._option():
                self._obj_as_()
            with self._option():
                self._keyword_()
            with self._option():
                self._obj_assg_spread_()
            self._error('no available options')

    @tatsumasu()
    def _obj_assg_spread_(self):  # noqa
        self._token('...')
        self._obj_path_()
        self.name_last_node('@')

    @tatsumasu()
    def _obj_as_(self):  # noqa
        self._obj_path_()
        self.name_last_node('origin')
        self._token('as')
        self._obj_path_()
        self.name_last_node('target')
        self.ast._define(
            ['origin', 'target'],
            []
        )

    @tatsumasu()
    def _assg_path_(self):  # noqa
        with self._choice():
            with self._option():
                self._obj_path_()
            with self._option():
                self._obj_assg_()
            self._error('no available options')

    @tatsumasu()
    def _expr_with_func_(self):  # noqa
        with self._choice():
            with self._option():
                self._func_call_()
                self.name_last_node('@')
            with self._option():
                self._expr_()
                self.name_last_node('@')
            self._error('no available options')

    @tatsumasu()
    def _expr_(self):  # noqa
        with self._choice():
            with self._option():
                self._tokens_()
            with self._option():
                self._obj_()
            with self._option():
                self._obj_path_()
            with self._option():
                self._string_()
            with self._option():
                self._digit_()
            with self._option():
                self._arr_()
            self._error('no available options')

    @tatsumasu()
    def _comma_or_nl_(self):  # noqa
        with self._choice():
            with self._option():

                def block0():
                    self._nl_()
                self._positive_closure(block0)
            with self._option():

                def block1():
                    self._nl_()
                self._closure(block1)
                self._token(',')

                def block2():
                    self._nl_()
                self._closure(block2)
            self._error('no available options')

    @tatsumasu()
    def _if_stmt_(self):  # noqa
        self._token('if')
        self._expr_()
        self.name_last_node('test')

        def block1():
            self._nl_()
        self._positive_closure(block1)
        with self._optional():
            self._stmt_coll_()
            self.name_last_node('then')
        with self._optional():
            self._token('else')

            def block3():
                self._nl_()
            self._positive_closure(block3)
            self._stmt_coll_()
            self.name_last_node('otherwise')

        def block5():
            self._nl_()
        self._closure(block5)
        self._token('end')
        self.ast._define(
            ['otherwise', 'test', 'then'],
            []
        )

    @tatsumasu()
    def _return_stmt_(self):  # noqa
        self._token('return')
        self._expr_with_func_()


class CryoLangSemantics(object):
    def start(self, ast):  # noqa
        return ast

    def stmt_coll(self, ast):  # noqa
        return ast

    def stmt(self, ast):  # noqa
        return ast

    def tokens(self, ast):  # noqa
        return ast

    def set_stmt(self, ast):  # noqa
        return ast

    def set_action(self, ast):  # noqa
        return ast

    def obj_path(self, ast):  # noqa
        return ast

    def obj_leaf(self, ast):  # noqa
        return ast

    def keyword(self, ast):  # noqa
        return ast

    def nl(self, ast):  # noqa
        return ast

    def string(self, ast):  # noqa
        return ast

    def digit(self, ast):  # noqa
        return ast

    def func_call(self, ast):  # noqa
        return ast

    def arr(self, ast):  # noqa
        return ast

    def arr_assg(self, ast):  # noqa
        return ast

    def arr_spread(self, ast):  # noqa
        return ast

    def obj(self, ast):  # noqa
        return ast

    def obj_merge(self, ast):  # noqa
        return ast

    def obj_kv(self, ast):  # noqa
        return ast

    def obj_spread(self, ast):  # noqa
        return ast

    def obj_key(self, ast):  # noqa
        return ast

    def obj_key_expr(self, ast):  # noqa
        return ast

    def obj_assg(self, ast):  # noqa
        return ast

    def obj_assg_to(self, ast):  # noqa
        return ast

    def obj_assg_spread(self, ast):  # noqa
        return ast

    def obj_as(self, ast):  # noqa
        return ast

    def assg_path(self, ast):  # noqa
        return ast

    def expr_with_func(self, ast):  # noqa
        return ast

    def expr(self, ast):  # noqa
        return ast

    def comma_or_nl(self, ast):  # noqa
        return ast

    def if_stmt(self, ast):  # noqa
        return ast

    def return_stmt(self, ast):  # noqa
        return ast


def main(filename, start=None, **kwargs):
    if start is None:
        start = 'start'
    if not filename or filename == '-':
        text = sys.stdin.read()
    else:
        with open(filename) as f:
            text = f.read()
    parser = CryoLangParser()
    return parser.parse(text, rule_name=start, filename=filename, **kwargs)


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, CryoLangParser, name='CryoLang')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(asjson(ast), indent=2))
    print()
